adding relative paths(this will be similar to the work done on depth search)
[x] pass a variable from the main script that is a reference to pwd
  - this will store a path trace from home to engen
  - this can then be used for all imports, with relative paths
  - will have to make sure the context of the root location is dynamic for when the "engen" command is run
    - will need to set the "ENGEN_FS_LOCATION" conditionally. Check if the var is exported to ".profile"
    - if it is, use that reference, else use hard coded "pwd"

files updated with "get_engen_fs_location" and "build_config_file"
- env-creation
  - [x] directories.sh
  - [x] generate_config_file.sh
    - finish updating new template format for generated config files
  - [x] generate_directory_tree.sh
    - at bottom when exporting "engen" command, also "export ENGEN_FS_LOCATION" in ".profile"
- programs-to-install
  - dependencies
    - [x] dependencies.sh
  - linux 
    - [x] choose_programs_and_install.sh
    - [x] dev_tools_installs.sh
- utils
  - cleanup
    - [x] cleanup_dir_trees.sh
    - [x] main.sh
  - git-utils
    - [x] git_update_repos.sh
    - [x] git_utils.sh
    - [x] main.sh
  - helpers
    - [x] initial_checks.sh
    - [x] vscode_extensions.sh
- [x] main.sh
- [x] engen.sh
  - [x] when "main.sh" is called from engen, make sure "get_engen_fs_location" is used to derive it's location
- [] once all files have been updated, manually smoke test the creation and updating of env using "./main.sh" and "engen" command
  - [x] will need to source ~/.profile after ROOT_ENV_OS is derived in initial_checks
  - [] /home/vnly/engen/env-creation/generate_directory_tree.sh: line 184: .engenrc_PracticeSpace: No such file or directory
    - when trying to create env(fix this)
    - [] seems to partially because of how "readlink -m" is being used. Error is that -m is an invalid option (likely another version related issue test on other machine)
    - [] build_config_file not generating config file structure in generate_directory_tree.sh (likely incorrect param issue)
  - [] issue with sed (likely issue with not being in bash version 4+) in generate_config_file.sh


[x] use reference to pwd for relative imports and for pointint to where main, and engen are in the
file system.
  - 2 first entry points are main(when env generation is being done for the first time) and engen(after main has been run)
  - in both entry points, import function from helpers file that will allow engen to be found in file system
  - this function will run pwd and can potentially take an argument that decides where the slicing of the pwd path output ends
  - pass this reference down through the scripts that are invoked after similar to component props that are being passed down alreday
  
[] add the following download steps to linux install list for AWS CLI install
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - udo ./aws/install

[] change the way programs are being checked if they are installed or not. 
  - Instead of "which" use the actual version of the program "EX: <program name> --version" to check if a program is installed
  - Some operating systems consider the negative output of "which" to be a non 0 length string. So we can properly confirm if 
  - an application is installed or not. Change this for all use cases of which.
  - spellcheck source=./programs-to-install/dependencies/dependencies.sh

[] update the help options when -h or --help are passed to the engen command
[] check that the structure of the new linux mint instance has the correct crds in the .gitconfig file in home dir
[] at the end of creating an environment notify the user of the env path.
  - this is needed because "engen" could be in just about any directory but generated envs will be exported to $HOME dir
  - should env be exported to $HOME, or the dir where engen was cloned to?
    - putting generated envs in other directories may make it harder to interface with said env. Mainly with the update scripts
      - but we'll also be passing the reference to the initial engen location around, so this may be relatively easy

[x] update "get file system location" function with new way of deriving relative path. Reference test file.
[] there's a cool way to make the "get_engen_fs_location" function recursive, by allowing an arugment 
  - that's the desired dir and is compared with the last dir name in the pwd path, if not the correct dir name
  - then keep recursively chaining "dirname" to 
